{"ast":null,"code":"var _jsxFileName = \"C:\\\\kisan_Api\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { MessageCircle, Send, X, Bot, User } from 'lucide-react';\nimport { useLanguage } from '../contexts/LanguageContext';\nimport { translations } from '../translations/translations';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = ({\n  onRecommendation\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([{\n    id: 1,\n    type: 'bot',\n    text: \"Hi! I'm your farming assistant. Tell me about your soil and weather conditions in simple terms, and I'll help you get crop recommendations!\"\n  }]);\n  const [inputText, setInputText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const parseNaturalLanguage = text => {\n    const lowerText = text.toLowerCase();\n    const parameters = {};\n\n    // Temperature parsing\n    if (lowerText.includes('hot') || lowerText.includes('warm') || lowerText.includes('high temperature')) {\n      parameters.temperature = 30;\n    } else if (lowerText.includes('cool') || lowerText.includes('cold') || lowerText.includes('low temperature')) {\n      parameters.temperature = 20;\n    } else if (lowerText.includes('moderate temperature')) {\n      parameters.temperature = 25;\n    }\n\n    // Humidity parsing\n    if (lowerText.includes('humid') || lowerText.includes('high humidity')) {\n      parameters.humidity = 80;\n    } else if (lowerText.includes('dry') || lowerText.includes('low humidity')) {\n      parameters.humidity = 40;\n    } else if (lowerText.includes('moderate humidity')) {\n      parameters.humidity = 60;\n    }\n\n    // Rainfall parsing\n    if (lowerText.includes('heavy rain') || lowerText.includes('high rainfall') || lowerText.includes('lots of rain')) {\n      parameters.rainfall = 200;\n    } else if (lowerText.includes('low rain') || lowerText.includes('drought') || lowerText.includes('little rain')) {\n      parameters.rainfall = 50;\n    } else if (lowerText.includes('moderate rain') || lowerText.includes('normal rain')) {\n      parameters.rainfall = 120;\n    }\n\n    // Soil type parsing\n    if (lowerText.includes('rocky') || lowerText.includes('sandy') || lowerText.includes('poor soil')) {\n      parameters.N = 20;\n      parameters.P = 15;\n      parameters.K = 20;\n      parameters.ph = 6.5;\n    } else if (lowerText.includes('fertile') || lowerText.includes('rich soil') || lowerText.includes('good soil')) {\n      parameters.N = 80;\n      parameters.P = 50;\n      parameters.K = 60;\n      parameters.ph = 6.8;\n    } else if (lowerText.includes('clay') || lowerText.includes('heavy soil')) {\n      parameters.N = 60;\n      parameters.P = 40;\n      parameters.K = 50;\n      parameters.ph = 7.0;\n    }\n\n    // Location-based defaults\n    if (lowerText.includes('north') || lowerText.includes('himalayan') || lowerText.includes('mountain')) {\n      parameters.temperature = 18;\n      parameters.humidity = 60;\n      parameters.rainfall = 100;\n    } else if (lowerText.includes('south') || lowerText.includes('tropical') || lowerText.includes('coastal')) {\n      parameters.temperature = 28;\n      parameters.humidity = 75;\n      parameters.rainfall = 150;\n    } else if (lowerText.includes('west') || lowerText.includes('desert') || lowerText.includes('arid')) {\n      parameters.temperature = 32;\n      parameters.humidity = 30;\n      parameters.rainfall = 80;\n    } else if (lowerText.includes('east') || lowerText.includes('plains') || lowerText.includes('delta')) {\n      parameters.temperature = 26;\n      parameters.humidity = 70;\n      parameters.rainfall = 180;\n    }\n\n    // Set defaults for missing parameters\n    if (!parameters.temperature) parameters.temperature = 25;\n    if (!parameters.humidity) parameters.humidity = 60;\n    if (!parameters.rainfall) parameters.rainfall = 120;\n    if (!parameters.N) parameters.N = 50;\n    if (!parameters.P) parameters.P = 30;\n    if (!parameters.K) parameters.K = 40;\n    if (!parameters.ph) parameters.ph = 6.5;\n    return parameters;\n  };\n  const handleSendMessage = async () => {\n    if (!inputText.trim()) return;\n    const userMessage = {\n      id: Date.now(),\n      type: 'user',\n      text: inputText\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputText('');\n    setIsTyping(true);\n\n    // Simulate bot thinking\n    setTimeout(() => {\n      const parameters = parseNaturalLanguage(inputText);\n      const botMessage = {\n        id: Date.now() + 1,\n        type: 'bot',\n        text: `Based on your description, I've interpreted your conditions as:\n        \n• Temperature: ${parameters.temperature}°C\n• Humidity: ${parameters.humidity}%\n• Rainfall: ${parameters.rainfall}mm\n• Soil nutrients: N=${parameters.N}, P=${parameters.P}, K=${parameters.K}\n• pH: ${parameters.ph}\n\nWould you like me to get crop recommendations based on these parameters?`,\n        parameters: parameters\n      };\n      setMessages(prev => [...prev, botMessage]);\n      setIsTyping(false);\n    }, 1500);\n  };\n  const handleGetRecommendation = parameters => {\n    if (onRecommendation) {\n      onRecommendation(parameters);\n      setIsOpen(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-toggle\",\n      onClick: () => setIsOpen(!isOpen),\n      title: \"Ask me about farming!\",\n      children: [/*#__PURE__*/_jsxDEV(MessageCircle, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chatbot-badge\",\n        children: \"Ask AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbot-title\",\n          children: [/*#__PURE__*/_jsxDEV(Bot, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Farming Assistant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatbot-close\",\n          onClick: () => setIsOpen(false),\n          children: /*#__PURE__*/_jsxDEV(X, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.type}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-avatar\",\n            children: message.type === 'bot' ? /*#__PURE__*/_jsxDEV(Bot, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(User, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 65\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-text\",\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 19\n            }, this), message.parameters && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"recommendation-button\",\n              onClick: () => handleGetRecommendation(message.parameters),\n              children: \"Get Crop Recommendations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-avatar\",\n            children: /*#__PURE__*/_jsxDEV(Bot, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-indicator\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Describe your soil and weather conditions...\",\n          className: \"chatbot-input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputText.trim(),\n          className: \"chatbot-send\",\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"DXZboFFs1R9KDswg7C6TQg//85s=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MessageCircle","Send","X","Bot","User","useLanguage","translations","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","onRecommendation","_s","isOpen","setIsOpen","messages","setMessages","id","type","text","inputText","setInputText","isTyping","setIsTyping","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","parseNaturalLanguage","lowerText","toLowerCase","parameters","includes","temperature","humidity","rainfall","N","P","K","ph","handleSendMessage","trim","userMessage","Date","now","prev","setTimeout","botMessage","handleGetRecommendation","handleKeyPress","e","key","shiftKey","preventDefault","children","className","onClick","title","size","fileName","_jsxFileName","lineNumber","columnNumber","map","message","ref","value","onChange","target","onKeyPress","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/kisan_Api/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { MessageCircle, Send, X, Bot, User } from 'lucide-react';\r\nimport { useLanguage } from '../contexts/LanguageContext';\r\nimport { translations } from '../translations/translations';\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = ({ onRecommendation }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      id: 1,\r\n      type: 'bot',\r\n      text: \"Hi! I'm your farming assistant. Tell me about your soil and weather conditions in simple terms, and I'll help you get crop recommendations!\"\r\n    }\r\n  ]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const parseNaturalLanguage = (text) => {\r\n    const lowerText = text.toLowerCase();\r\n    const parameters = {};\r\n\r\n    // Temperature parsing\r\n    if (lowerText.includes('hot') || lowerText.includes('warm') || lowerText.includes('high temperature')) {\r\n      parameters.temperature = 30;\r\n    } else if (lowerText.includes('cool') || lowerText.includes('cold') || lowerText.includes('low temperature')) {\r\n      parameters.temperature = 20;\r\n    } else if (lowerText.includes('moderate temperature')) {\r\n      parameters.temperature = 25;\r\n    }\r\n\r\n    // Humidity parsing\r\n    if (lowerText.includes('humid') || lowerText.includes('high humidity')) {\r\n      parameters.humidity = 80;\r\n    } else if (lowerText.includes('dry') || lowerText.includes('low humidity')) {\r\n      parameters.humidity = 40;\r\n    } else if (lowerText.includes('moderate humidity')) {\r\n      parameters.humidity = 60;\r\n    }\r\n\r\n    // Rainfall parsing\r\n    if (lowerText.includes('heavy rain') || lowerText.includes('high rainfall') || lowerText.includes('lots of rain')) {\r\n      parameters.rainfall = 200;\r\n    } else if (lowerText.includes('low rain') || lowerText.includes('drought') || lowerText.includes('little rain')) {\r\n      parameters.rainfall = 50;\r\n    } else if (lowerText.includes('moderate rain') || lowerText.includes('normal rain')) {\r\n      parameters.rainfall = 120;\r\n    }\r\n\r\n    // Soil type parsing\r\n    if (lowerText.includes('rocky') || lowerText.includes('sandy') || lowerText.includes('poor soil')) {\r\n      parameters.N = 20;\r\n      parameters.P = 15;\r\n      parameters.K = 20;\r\n      parameters.ph = 6.5;\r\n    } else if (lowerText.includes('fertile') || lowerText.includes('rich soil') || lowerText.includes('good soil')) {\r\n      parameters.N = 80;\r\n      parameters.P = 50;\r\n      parameters.K = 60;\r\n      parameters.ph = 6.8;\r\n    } else if (lowerText.includes('clay') || lowerText.includes('heavy soil')) {\r\n      parameters.N = 60;\r\n      parameters.P = 40;\r\n      parameters.K = 50;\r\n      parameters.ph = 7.0;\r\n    }\r\n\r\n    // Location-based defaults\r\n    if (lowerText.includes('north') || lowerText.includes('himalayan') || lowerText.includes('mountain')) {\r\n      parameters.temperature = 18;\r\n      parameters.humidity = 60;\r\n      parameters.rainfall = 100;\r\n    } else if (lowerText.includes('south') || lowerText.includes('tropical') || lowerText.includes('coastal')) {\r\n      parameters.temperature = 28;\r\n      parameters.humidity = 75;\r\n      parameters.rainfall = 150;\r\n    } else if (lowerText.includes('west') || lowerText.includes('desert') || lowerText.includes('arid')) {\r\n      parameters.temperature = 32;\r\n      parameters.humidity = 30;\r\n      parameters.rainfall = 80;\r\n    } else if (lowerText.includes('east') || lowerText.includes('plains') || lowerText.includes('delta')) {\r\n      parameters.temperature = 26;\r\n      parameters.humidity = 70;\r\n      parameters.rainfall = 180;\r\n    }\r\n\r\n    // Set defaults for missing parameters\r\n    if (!parameters.temperature) parameters.temperature = 25;\r\n    if (!parameters.humidity) parameters.humidity = 60;\r\n    if (!parameters.rainfall) parameters.rainfall = 120;\r\n    if (!parameters.N) parameters.N = 50;\r\n    if (!parameters.P) parameters.P = 30;\r\n    if (!parameters.K) parameters.K = 40;\r\n    if (!parameters.ph) parameters.ph = 6.5;\r\n\r\n    return parameters;\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      type: 'user',\r\n      text: inputText\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputText('');\r\n    setIsTyping(true);\r\n\r\n    // Simulate bot thinking\r\n    setTimeout(() => {\r\n      const parameters = parseNaturalLanguage(inputText);\r\n      \r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        type: 'bot',\r\n        text: `Based on your description, I've interpreted your conditions as:\r\n        \r\n• Temperature: ${parameters.temperature}°C\r\n• Humidity: ${parameters.humidity}%\r\n• Rainfall: ${parameters.rainfall}mm\r\n• Soil nutrients: N=${parameters.N}, P=${parameters.P}, K=${parameters.K}\r\n• pH: ${parameters.ph}\r\n\r\nWould you like me to get crop recommendations based on these parameters?`,\r\n        parameters: parameters\r\n      };\r\n\r\n      setMessages(prev => [...prev, botMessage]);\r\n      setIsTyping(false);\r\n    }, 1500);\r\n  };\r\n\r\n  const handleGetRecommendation = (parameters) => {\r\n    if (onRecommendation) {\r\n      onRecommendation(parameters);\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Chatbot Toggle Button */}\r\n      <button \r\n        className=\"chatbot-toggle\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        title=\"Ask me about farming!\"\r\n      >\r\n        <MessageCircle size={24} />\r\n        <span className=\"chatbot-badge\">Ask AI</span>\r\n      </button>\r\n\r\n      {/* Chatbot Window */}\r\n      {isOpen && (\r\n        <div className=\"chatbot-window\">\r\n          <div className=\"chatbot-header\">\r\n            <div className=\"chatbot-title\">\r\n              <Bot size={20} />\r\n              <span>Farming Assistant</span>\r\n            </div>\r\n            <button \r\n              className=\"chatbot-close\"\r\n              onClick={() => setIsOpen(false)}\r\n            >\r\n              <X size={18} />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"chatbot-messages\">\r\n            {messages.map((message) => (\r\n              <div key={message.id} className={`message ${message.type}`}>\r\n                <div className=\"message-avatar\">\r\n                  {message.type === 'bot' ? <Bot size={16} /> : <User size={16} />}\r\n                </div>\r\n                <div className=\"message-content\">\r\n                  <div className=\"message-text\">{message.text}</div>\r\n                  {message.parameters && (\r\n                    <button \r\n                      className=\"recommendation-button\"\r\n                      onClick={() => handleGetRecommendation(message.parameters)}\r\n                    >\r\n                      Get Crop Recommendations\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            \r\n            {isTyping && (\r\n              <div className=\"message bot\">\r\n                <div className=\"message-avatar\">\r\n                  <Bot size={16} />\r\n                </div>\r\n                <div className=\"message-content\">\r\n                  <div className=\"typing-indicator\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          <div className=\"chatbot-input\">\r\n            <input\r\n              type=\"text\"\r\n              value={inputText}\r\n              onChange={(e) => setInputText(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              placeholder=\"Describe your soil and weather conditions...\"\r\n              className=\"chatbot-input-field\"\r\n            />\r\n            <button \r\n              onClick={handleSendMessage}\r\n              disabled={!inputText.trim()}\r\n              className=\"chatbot-send\"\r\n            >\r\n              <Send size={18} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}